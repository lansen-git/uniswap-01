{"ast":null,"code":"import useENS from '../../hooks/useENS';\nimport { Version } from '../../hooks/useToggledVersion';\nimport { parseUnits } from '@ethersproject/units';\nimport { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@uniswap/sdk';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useV1Trade } from '../../data/V1';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport useToggledVersion from '../../hooks/useToggledVersion';\nimport { useUserSlippageTolerance } from '../user/hooks';\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices';\nexport function useSwapState() {\n  return useSelector(state => state.swap);\n}\nexport function useSwapActionHandlers() {\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n} // try to parse a user entered amount for a given token\n\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed)) : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  } // necessary for all paths to return a value\n\n\n  return undefined;\n}\nconst BAD_RECIPIENT_ADDRESSES = ['0x527ebd73a64b96100b7aae6bdde4b876947d370b', // v2 factory\n'0xd101544cd6e7216b40ca76fb8ea79eb86f7c1fdd', // v2 router 01\n'0xd101544cd6e7216b40ca76fb8ea79eb86f7c1fdd' // v2 router 02\n];\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\n\nfunction involvesAddress(trade, checksummedAddress) {\n  return trade.route.path.some(token => token.address === checksummedAddress) || trade.route.pairs.some(pair => pair.liquidityToken.address === checksummedAddress);\n} // from the current swap inputs, compute the best trade and return it.\n\n\nexport function useDerivedSwapInfo() {\n  var _ref, _ref2;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const toggledVersion = useToggledVersion();\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useSwapState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  const relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  }; // get link to trade on v1, if a better rate exists\n\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount);\n  let inputError;\n\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n\n  if (!parsedAmount) {\n    var _inputError;\n\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : 'Enter an amount';\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : 'Select a token';\n  }\n\n  const formattedTo = isAddress(to);\n\n  if (!to || !formattedTo) {\n    var _inputError3;\n\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : 'Enter a recipient';\n  } else {\n    if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 || bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo) || bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo)) {\n      var _inputError4;\n\n      inputError = (_inputError4 = inputError) !== null && _inputError4 !== void 0 ? _inputError4 : 'Invalid recipient';\n    }\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\n  const slippageAdjustedAmountsV1 = v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage); // compare input balance to max input based on version\n\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], toggledVersion === Version.v1 ? slippageAdjustedAmountsV1 ? slippageAdjustedAmountsV1[Field.INPUT] : null : slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError,\n    v1Trade\n  };\n}\n\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _ETH;\n\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH';\n    if (valid === false) return 'ETH';\n  }\n\n  return (_ETH = 'ETH') !== null && _ETH !== void 0 ? _ETH : '';\n}\n\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\n\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\n\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToSwapState(parsedQs) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n} // updates the swap state to use the defaults for a given network\n\nexport function useDefaultsFromURLSearch() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n  return result;\n}","map":{"version":3,"sources":["C:/Users/lansen/Desktop/uniswap-front-interface/src/state/swap/hooks.ts"],"names":["useENS","Version","parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useState","useDispatch","useSelector","useV1Trade","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useToggledVersion","useUserSlippageTolerance","computeSlippageAdjustedAmounts","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedSwapInfo","account","toggledVersion","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","v1Trade","inputError","formattedTo","indexOf","allowedSlippage","slippageAdjustedAmounts","slippageAdjustedAmountsV1","balanceIn","amountIn","v1","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","result","setResult","parsed"],"mappings":"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","sourcesContent":["import useENS from '../../hooks/useENS'\r\nimport { Version } from '../../hooks/useToggledVersion'\r\nimport { parseUnits } from '@ethersproject/units'\r\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@uniswap/sdk'\r\nimport { ParsedQs } from 'qs'\r\nimport { useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useV1Trade } from '../../data/V1'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\r\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\r\nimport { isAddress } from '../../utils'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\r\nimport { SwapState } from './reducer'\r\nimport useToggledVersion from '../../hooks/useToggledVersion'\r\nimport { useUserSlippageTolerance } from '../user/hooks'\r\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\r\n\r\nexport function useSwapState(): AppState['swap'] {\r\n  return useSelector<AppState, AppState['swap']>(state => state.swap)\r\n}\r\n\r\nexport function useSwapActionHandlers(): {\r\n  onCurrencySelection: (field: Field, currency: Currency) => void\r\n  onSwitchTokens: () => void\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n  onChangeRecipient: (recipient: string | null) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const onCurrencySelection = useCallback(\r\n    (field: Field, currency: Currency) => {\r\n      dispatch(\r\n        selectCurrency({\r\n          field,\r\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\r\n        })\r\n      )\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const onSwitchTokens = useCallback(() => {\r\n    dispatch(switchCurrencies())\r\n  }, [dispatch])\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const onChangeRecipient = useCallback(\r\n    (recipient: string | null) => {\r\n      dispatch(setRecipient({ recipient }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return {\r\n    onSwitchTokens,\r\n    onCurrencySelection,\r\n    onUserInput,\r\n    onChangeRecipient\r\n  }\r\n}\r\n\r\n// try to parse a user entered amount for a given token\r\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  if (!value || !currency) {\r\n    return undefined\r\n  }\r\n  try {\r\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\r\n    if (typedValueParsed !== '0') {\r\n      return currency instanceof Token\r\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\r\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\r\n    }\r\n  } catch (error) {\r\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\r\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\r\n  }\r\n  // necessary for all paths to return a value\r\n  return undefined\r\n}\r\n\r\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\r\n  '0x527ebd73a64b96100b7aae6bdde4b876947d370b', // v2 factory\r\n  '0xd101544cd6e7216b40ca76fb8ea79eb86f7c1fdd', // v2 router 01\r\n  '0xd101544cd6e7216b40ca76fb8ea79eb86f7c1fdd' // v2 router 02\r\n]\r\n\r\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\r\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\r\n  return (\r\n    trade.route.path.some(token => token.address === checksummedAddress) ||\r\n    trade.route.pairs.some(pair => pair.liquidityToken.address === checksummedAddress)\r\n  )\r\n}\r\n\r\n// from the current swap inputs, compute the best trade and return it.\r\nexport function useDerivedSwapInfo(): {\r\n  currencies: { [field in Field]?: Currency }\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmount: CurrencyAmount | undefined\r\n  v2Trade: Trade | undefined\r\n  inputError?: string\r\n  v1Trade: Trade | undefined\r\n} {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const toggledVersion = useToggledVersion()\r\n\r\n  const {\r\n    independentField,\r\n    typedValue,\r\n    [Field.INPUT]: { currencyId: inputCurrencyId },\r\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\r\n    recipient\r\n  } = useSwapState()\r\n\r\n  const inputCurrency = useCurrency(inputCurrencyId)\r\n  const outputCurrency = useCurrency(outputCurrencyId)\r\n  const recipientLookup = useENS(recipient ?? undefined)\r\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\r\n\r\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\r\n    inputCurrency ?? undefined,\r\n    outputCurrency ?? undefined\r\n  ])\r\n\r\n  const isExactIn: boolean = independentField === Field.INPUT\r\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\r\n\r\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\r\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\r\n\r\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\r\n\r\n  const currencyBalances = {\r\n    [Field.INPUT]: relevantTokenBalances[0],\r\n    [Field.OUTPUT]: relevantTokenBalances[1]\r\n  }\r\n\r\n  const currencies: { [field in Field]?: Currency } = {\r\n    [Field.INPUT]: inputCurrency ?? undefined,\r\n    [Field.OUTPUT]: outputCurrency ?? undefined\r\n  }\r\n\r\n  // get link to trade on v1, if a better rate exists\r\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount)\r\n\r\n  let inputError: string | undefined\r\n  if (!account) {\r\n    inputError = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmount) {\r\n    inputError = inputError ?? 'Enter an amount'\r\n  }\r\n\r\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\r\n    inputError = inputError ?? 'Select a token'\r\n  }\r\n\r\n  const formattedTo = isAddress(to)\r\n  if (!to || !formattedTo) {\r\n    inputError = inputError ?? 'Enter a recipient'\r\n  } else {\r\n    if (\r\n      BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\r\n      (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\r\n      (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\r\n    ) {\r\n      inputError = inputError ?? 'Invalid recipient'\r\n    }\r\n  }\r\n\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\r\n\r\n  const slippageAdjustedAmountsV1 =\r\n    v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage)\r\n\r\n  // compare input balance to max input based on version\r\n  const [balanceIn, amountIn] = [\r\n    currencyBalances[Field.INPUT],\r\n    toggledVersion === Version.v1\r\n      ? slippageAdjustedAmountsV1\r\n        ? slippageAdjustedAmountsV1[Field.INPUT]\r\n        : null\r\n      : slippageAdjustedAmounts\r\n      ? slippageAdjustedAmounts[Field.INPUT]\r\n      : null\r\n  ]\r\n\r\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\r\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance'\r\n  }\r\n\r\n  return {\r\n    currencies,\r\n    currencyBalances,\r\n    parsedAmount,\r\n    v2Trade: v2Trade ?? undefined,\r\n    inputError,\r\n    v1Trade\r\n  }\r\n}\r\n\r\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\r\n  if (typeof urlParam === 'string') {\r\n    const valid = isAddress(urlParam)\r\n    if (valid) return valid\r\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\r\n    if (valid === false) return 'ETH'\r\n  }\r\n  return 'ETH' ?? ''\r\n}\r\n\r\nfunction parseTokenAmountURLParameter(urlParam: any): string {\r\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\r\n}\r\n\r\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\r\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\r\n}\r\n\r\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\r\nfunction validatedRecipient(recipient: any): string | null {\r\n  if (typeof recipient !== 'string') return null\r\n  const address = isAddress(recipient)\r\n  if (address) return address\r\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\r\n  if (ADDRESS_REGEX.test(recipient)) return recipient\r\n  return null\r\n}\r\n\r\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\r\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\r\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\r\n  if (inputCurrency === outputCurrency) {\r\n    if (typeof parsedQs.outputCurrency === 'string') {\r\n      inputCurrency = ''\r\n    } else {\r\n      outputCurrency = ''\r\n    }\r\n  }\r\n\r\n  const recipient = validatedRecipient(parsedQs.recipient)\r\n\r\n  return {\r\n    [Field.INPUT]: {\r\n      currencyId: inputCurrency\r\n    },\r\n    [Field.OUTPUT]: {\r\n      currencyId: outputCurrency\r\n    },\r\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\r\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\r\n    recipient\r\n  }\r\n}\r\n\r\n// updates the swap state to use the defaults for a given network\r\nexport function useDefaultsFromURLSearch():\r\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\r\n  | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const parsedQs = useParsedQueryString()\r\n  const [result, setResult] = useState<\r\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\r\n  >()\r\n\r\n  useEffect(() => {\r\n    if (!chainId) return\r\n    const parsed = queryParametersToSwapState(parsedQs)\r\n\r\n    dispatch(\r\n      replaceSwapState({\r\n        typedValue: parsed.typedValue,\r\n        field: parsed.independentField,\r\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\r\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\r\n        recipient: parsed.recipient\r\n      })\r\n    )\r\n\r\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dispatch, chainId])\r\n\r\n  return result\r\n}\r\n"]},"metadata":{},"sourceType":"module"}