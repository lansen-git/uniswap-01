{"ast":null,"code":"import JSBI from 'jsbi';\nexport { default as JSBI } from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport { getAddress, getCreate2Address } from '@ethersproject/address';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport _Decimal from 'decimal.js-light';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { Contract } from '@ethersproject/contracts';\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json';\n\nvar _SOLIDITY_TYPE_MAXIMA;\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"HECOMAINNET\"] = 128] = \"HECOMAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"G\\xD6RLI\"] = 5] = \"G\\xD6RLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n})(ChainId || (ChainId = {}));\n\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\n\nvar FACTORY_ADDRESS = '0x527ebd73a64b96100b7aae6bdde4b876947d370b';\nvar INIT_CODE_HASH = 'b0369ccfee4b3a363e7c2dc0c57e14420a950794a06924293fa8ec3b369bea39';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\n\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\n\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\n\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\n\nvar SolidityType;\n\n(function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n})(SolidityType || (SolidityType = {}));\n\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n} // warns if addresses are not checksummed\n\n\nfunction validateAndParseAddress(address) {\n  try {\n    var checksummedAddress = getAddress(address);\n    process.env.NODE_ENV !== \"production\" ? warning(address === checksummedAddress, address + \" is not checksummed.\") : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? invariant(false, address + \" is not a valid address.\") : invariant(false);\n  }\n}\n\nfunction parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n} // mock the on-chain sqrt function\n\n\nfunction sqrt(y) {\n  validateSolidityTypeInstance(y, SolidityType.uint256);\n  var z = ZERO;\n  var x;\n\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\n\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n\n  return z;\n} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\n\n\nvar Currency =\n/**\r\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction Currency(decimals, symbol, name) {\n  validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\r\n * The only instance of the base class `Currency`.\r\n */\n\n\nCurrency.ETHER = /*#__PURE__*/new Currency(18, 'ETH', 'Ether');\nvar ETHER = Currency.ETHER;\n\nvar _WETH;\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n\n  return Token;\n}(Currency);\n/**\r\n * Compares two currencies for equality\r\n */\n\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar WETH = (_WETH = {}, _WETH[ChainId.HECOMAINNET] = /*#__PURE__*/new Token(ChainId.HECOMAINNET, '0xea4edb61abaa41f940047bd0896db47ec7ce4d30', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.ROPSTEN] = /*#__PURE__*/new Token(ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.RINKEBY] = /*#__PURE__*/new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.GÖRLI] = /*#__PURE__*/new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.KOVAN] = /*#__PURE__*/new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH);\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = ONE;\n    }\n\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction); // amount _must_ be raw, i.e. in the native representation\n\n\n  function CurrencyAmount(currency, amount) {\n    var _this;\n\n    var parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\n\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount); // amount _must_ be raw, i.e. in the native representation\n\n\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n\n  var _proto = TokenAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n\n  return TokenAmount;\n}(CurrencyAmount);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction); // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n\n  Price.fromRoute = function fromRoute(route) {\n    var prices = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n\n    return prices.slice(1).reduce(function (accumulator, currentValue) {\n      return accumulator.multiply(currentValue);\n    }, prices[0]);\n  };\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n\nvar PAIR_ADDRESS_CACHE = {};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;\n\n    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n\n    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE === void 0 ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) === null || _PAIR_ADDRESS_CACHE$t === void 0 ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {\n      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;\n\n      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE2 === void 0 ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = getCreate2Address(FACTORY_ADDRESS, keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH), _extends2)), _extends3));\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\n  ;\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\n  ;\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\n  ;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = parseBigintIsh(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = sqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !pairs.every(function (pair) {\n      return pair.chainId === pairs[0].chainId;\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [input instanceof Token ? input : WETH[pairs[0].chainId]];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PATH') : invariant(false) : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output !== null && output !== void 0 ? output : path[path.length - 1];\n  }\n\n  _createClass(Route, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n\nvar _100_PERCENT = /*#__PURE__*/new Fraction(_100);\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\n\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw);\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === ETHER) return WETH[chainId];\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),\n            outputAmount = _pair$getOutputAmount[0],\n            nextPair = _pair$getOutputAmount[1];\n\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),\n            inputAmount = _pair$getInputAmount[0],\n            _nextPair = _pair$getInputAmount[1];\n\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : route.input === ETHER ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\n  ;\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        ;\n\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        ;\n\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.raw.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === ETHER;\n    var etherOut = trade.outputAmount.currency === ETHER; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(options.ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nvar ERC20 = [{\n  constant: true,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nvar _TOKEN_DECIMALS_CACHE;\n\nvar TOKEN_DECIMALS_CACHE = (_TOKEN_DECIMALS_CACHE = {}, _TOKEN_DECIMALS_CACHE[ChainId.MAINNET] = {\n  '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n\n}, _TOKEN_DECIMALS_CACHE);\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\n\nvar Fetcher = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Fetcher() {}\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\n\n\n  Fetcher.fetchTokenData = function fetchTokenData(chainId, address, provider, symbol, name) {\n    try {\n      var _TOKEN_DECIMALS_CACHE2, _TOKEN_DECIMALS_CACHE3;\n\n      var _temp3 = function _temp3(parsedDecimals) {\n        return new Token(chainId, address, parsedDecimals, symbol, name);\n      };\n\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(chainId));\n\n      var _temp4 = typeof ((_TOKEN_DECIMALS_CACHE2 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE2 === void 0 ? void 0 : (_TOKEN_DECIMALS_CACHE3 = _TOKEN_DECIMALS_CACHE2[chainId]) === null || _TOKEN_DECIMALS_CACHE3 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE3[address]) === 'number';\n\n      return Promise.resolve(_temp4 ? _temp3(TOKEN_DECIMALS_CACHE[chainId][address]) : Promise.resolve(new Contract(address, ERC20, provider).decimals().then(function (decimals) {\n        var _TOKEN_DECIMALS_CACHE4, _extends2, _extends3;\n\n        TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE4 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE4 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE4[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));\n        return decimals;\n      })).then(_temp3));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\n  ;\n\n  Fetcher.fetchPairData = function fetchPairData(tokenA, tokenB, provider) {\n    try {\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(tokenA.chainId));\n      !(tokenA.chainId === tokenB.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n      var address = Pair.getAddress(tokenA, tokenB);\n      return Promise.resolve(new Contract(address, IUniswapV2Pair.abi, provider).getReserves()).then(function (_ref) {\n        var reserves0 = _ref[0],\n            reserves1 = _ref[1];\n        var balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n        return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return Fetcher;\n}();\n\nexport { ChainId, Currency, CurrencyAmount, ETHER, FACTORY_ADDRESS, Fetcher, Fraction, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, MINIMUM_LIQUIDITY, Pair, Percent, Price, Rounding, Route, Router, Token, TokenAmount, Trade, TradeType, WETH, currencyEquals, inputOutputComparator, tradeComparator };","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","MINIMUM_LIQUIDITY","ZERO","JSBI","TWO","BigInt","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","constructor","CAN_SET_PROTOTYPE","Object","validateSolidityTypeInstance","checksummedAddress","getAddress","error","x","divide","lessThan","notEqual","z","items","length","maxSize","isFull","comparator","hi","mid","chainId","validateAndParseAddress","equals","other","toLowerCase","address","currencyA","currencyB","Big","toSignificantRounding","toFixedRounding","denominator","ONE","invert","otherParsed","format","groupSeparator","rounding","Decimal","precision","significantDigits","quotient","numerator","parsedAmount","add","CurrencyAmount","decimalPlaces","decimals","TokenAmount","i","pair","prices","path","quoteCurrency","multiply","Price","baseCurrency","tokens","PAIR_ADDRESS_CACHE","tokenAmountA","tokenAmounts","liquidityToken","Pair","involvesToken","token","raw","equal","inputAmountWithFee","inputAmount","outputReserve","inputReserve","outputAmount","greaterThanOrEqual","reserveOf","subtract","tokenAmountB","amount0","totalSupply","liquidity","lessThanOrEqual","feeOn","totalSupplyAdjusted","rootKLast","greaterThan","feeLiquidity","pairs","input","output","Token","currentInput","midPrice","toSignificant","slippage","exactQuote","currencyEquals","a","currency","ioComp","currencyAmount","WETH","amounts","nextPairs","route","tradeType","EXACT_INPUT","wrappedAmount","executionPrice","fromRoute","Route","computePriceImpact","minimumAmountOut","EXACT_OUTPUT","slippageAdjustedAmountOut","slippageAdjustedAmountIn","maxNumResults","maxHops","currentPairs","originalAmountIn","bestTrades","currencyAmountIn","currencyOut","undefined","amountIn","tokenOut","wrappedCurrency","token0","amountOut","pairsExcludingThisPair","slice","Trade","originalAmountOut","currencyAmountOut","currencyIn","tokenIn","etherOut","trade","etherIn","options","toHex","maximumAmountIn","deadline","methodName","args","value","provider","parsedDecimals","TOKEN_DECIMALS_CACHE","Contract","getDefaultProvider","getNetwork","reserves0","reserves1","IUniswapV2Pair","balances","tokenA"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}